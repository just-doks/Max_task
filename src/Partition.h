#ifndef PARTITION_H
#define PARTITION_H

#include <cstdint> // uint_t
#include <fstream> // std::fstream
#include "PBR.h"
#include "Bytes.h"

// Класс, отвечающий за взаимодействие с разделом.
// Функции поиска файла и дефрагментации лежат в его реализации.
class Partition
{
    protected:
        // Метод для инициализации экземпляра класса:
        // - Открывается поток к файлу устройства для чтения и записи;
        // - Считывается загрузочная запись раздела, и если запись подлинная,
        // - Считывается таблица FAT в контейнер.
        auto init(const std::string& path) -> void;
    
    public:
        // Экземпляр класса PBR(Partition Boot Record).
        // Используется для хранения сведений о разделе.
        // К нему регулярно приходится обращаться для работы с разделом.
        PBR pbr;

        // Контейнер для байт таблицы FAT. Из него считываются данные
        // о занимаемых файлами кластерах. При необходимости, в таблицу
        // вносятся изменения, после чего, она может быть записана
        // обратно в файл устройства для фиксации изменений.
        Bytes FAT;

        // Экземпляр, реализующий доступ к файлу устройства.
        // Через него осуществляется доступ к файлам в разделе, его данным.
        // С помощью этого экземпляра также осуществляется запись
        // всех изменений на раздел.
        std::fstream drive;

        // Конструктор класса. Позволяет создать экземпляр только
        // при указании пути. При некорректном пути, потребуется
        // создавать новый экземпляр. Это сказывается на гибкости,
        // но несколько сокращает возможные ошибки.
        Partition(const std::string& path) { init(path); }

        // Метод для проверки, был ли инициализирован экземпляр корректно.
        auto is_open() const -> bool;

        ~Partition() 
        {
            if (drive.is_open())
                drive.close();
        }            
};

#endif // PARTITION_H