#ifndef PROGRAM_H
#define PROGRAM_H

#include <vector>
#include <string>
#include <functional>

#include "File.h"
#include "Partition.h"

// Класс программы. Реализует диалог с пользователем и инициирует
// выполнение процедур для выполнения поставленных задач.
class Program
{
    private:
        /* Функция поиска файла в указанной директории по заданному
         * условию, которое передаётся в виде функции,
         * обрабатывающей строковые значения.
         * Передаваемая функция проверяет элементы (файлы)
         * директории на предмет соответствия реализованных условий. 
         * Ранее, программа могла определять доступные разделы 
         * из сектора Master Boot Record, но данная реализация
         * оказалась неактуальной. */
        std::vector<std::string> get_files_from_dir
            ( const std::string& directory_path, 
              std::function<bool(const std::string&)> condition );
        
        // Метод получает список файлов, проверяет, 
        // какие относятся к FAT разделам
        // и возвращает список подходящих файлов.
        std::vector<std::string> find_fat_partitions
            ( const std::vector<std::string>& list );
        
        /* Нестатические методы класса нельзя передать 
         * в качестве аргументов, поскольку они привязаны 
         * к экземплярам класса (имеют скрытый аргумент this).
         * Однако, статические методы принадлежат классу
         * и не имеют связи с экземплярами класса. 
         * Их можно передавать в кач-ве аргументов. */

        // Метод проверяет строку на соответствие шаблону 
        // специального файла раздела файловой системы (sd[a-z][a-z][1-15])
        static bool is_partition(const std::string& str);

    public:
        // Метод запуска программы. Начинает диалог с пользователем.
        void start();

        // Открытый метод программы, позволяющий начать поиск указанного
        // раздела. При автоматическом поиске, спрашивает у пользователя,
        // какой из предложенных разделов необходим. Либо предлагает 
        // ручной ввод пути к специальному файлу раздела.
        auto fat_search(const std::string& directory) -> std::string;

        // Метод, открывающий раздел и спрашивающий у пользователя
        // путь до файла или директории, к которым необходимо
        // применить алгоритм дефрагментации.
        // Путь задаётся в формате "/ПУТЬ.../ИМЯ". Для дефрагментации
        // файлов из корневой директории, достаточно написать слэш "/".
        auto open_partition(const std::string& sd_filename) -> void;

        // Метод, предоставляющий пользователю возможность запустить
        // дефрагментацию, если это возможно, и выводящая сообщение
        // о проделанной процедуре в случае её выполнения.
        auto fragmentation_check(Partition& p, 
            FileManagment::File& f) -> void;
};

#endif // PROGRAM_H